"""
An√°lisis Exploratorio de Datos (EDA)
====================================

M√≥dulo que implementa exactamente el c√≥digo de la GU√çA 1 para el an√°lisis
exploratorio de datos del proyecto de rendimiento acad√©mico.

Incluye funciones para:
- Cargar y explorar datos
- Generar reportes con ydata-profiling
- An√°lisis estad√≠stico b√°sico
- Detecci√≥n de patrones y tendencias

Autor: Equipo Grupo 4
Fecha: 2025
"""

import pandas as pd
import numpy as np
import logging
from pathlib import Path
from typing import Optional

# Importar configuraci√≥n y utilidades
import importlib
config = importlib.import_module('src.00_config')
utils = importlib.import_module('src.00_utils')

# Extraer funciones y constantes necesarias
ARCHIVO_DATOS_ORIGINAL = config.ARCHIVO_DATOS_ORIGINAL
ARCHIVO_REPORTE_EDA = config.ARCHIVO_REPORTE_EDA
MENSAJES = config.MENSAJES
cargar_dataframe = utils.cargar_dataframe
mostrar_info_dataframe = utils.mostrar_info_dataframe
imprimir_separador = utils.imprimir_separador
limpiar_memoria = utils.limpiar_memoria

def cargar_datos_originales() -> pd.DataFrame:
    """
    Carga los datos originales del archivo CSV.
    
    Returns:
        pd.DataFrame: DataFrame con los datos originales
    """
    print(MENSAJES['inicio_eda'])
    
    # Cargar datos usando la funci√≥n de utilidades
    df = cargar_dataframe(ARCHIVO_DATOS_ORIGINAL)
    
    return df

def explorar_datos_basicos(df: pd.DataFrame) -> None:
    """
    Realiza exploraci√≥n b√°sica de los datos (equivalente al c√≥digo de la Gu√≠a 1).
    
    Args:
        df (pd.DataFrame): DataFrame con los datos originales
    """
    imprimir_separador("EXPLORACI√ìN B√ÅSICA DE DATOS")
    
    # Informaci√≥n general del dataset (de la Gu√≠a 1)
    print("\nüîç INFORMACI√ìN GENERAL:")
    print(df.info())
    print("\nüìä PRIMERAS 5 FILAS:")
    print(df.head())
    
    # Valores nulos por columna (de la Gu√≠a 1)
    print("\n‚ö†Ô∏è  VALORES NULOS POR COLUMNA:")
    print(df.isnull().sum())
    print("-----------------------------------")
    
    # Estad√≠sticas descriptivas (de la Gu√≠a 1)
    print("\nüìà ESTAD√çSTICAS DESCRIPTIVAS:")
    print(df.describe())
    print("-----------------------------------")
    
    # Columnas √∫nicas (de la Gu√≠a 1)
    print("\nüî¢ VALORES √öNICOS POR COLUMNA:")
    print(df.nunique())
    print("-----------------------------------")
    
    # Duplicados (de la Gu√≠a 1)
    print(f"\nüìã FILAS DUPLICADAS: {df.duplicated().sum()}")

def analizar_patrones_tendencias(df: pd.DataFrame) -> None:
    """
    Analiza patrones y tendencias espec√≠ficas (c√≥digo exacto de la Gu√≠a 1).
    
    Args:
        df (pd.DataFrame): DataFrame con los datos originales
    """
    imprimir_separador("AN√ÅLISIS DE PATRONES Y TENDENCIAS")
    
    # C√≥digo exacto de la Gu√≠a 1 - Paso 5
    print("\nüìä ESTAD√çSTICAS DESCRIPTIVAS DE VARIABLES NUM√âRICAS:")
    
    print("\nüïê Hours_Studied (Horas de estudio):")
    print("Estad√≠sticas descriptivas (media, mediana, desviaci√≥n est√°ndar, etc.) de horas de estudio.")
    print(df["Hours_Studied"].describe())
    
    print("\nüéØ Attendance (Asistencia):")
    print("Distribuci√≥n de asistencias.")
    print(df["Attendance"].value_counts())
    
    print("\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ Parental_Involvement (Participaci√≥n parental):")
    print("Frecuencias del nivel de participaci√≥n parental.")
    print(df["Parental_Involvement"].value_counts())
    
    print("\nüìö Access_to_Resources (Acceso a recursos):")
    print("Frecuencias del nivel de acceso a recursos.")
    print(df["Access_to_Resources"].value_counts())
    
    print("\nüèÉ‚Äç‚ôÄÔ∏è Extracurricular_Activities (Actividades extracurriculares):")
    print("Conteo de estudiantes que participan vs. no participan.")
    print(df["Extracurricular_Activities"].value_counts())
    
    print("\nüò¥ Sleep_Hours (Horas de sue√±o):")
    print("Estad√≠sticas descriptivas de horas de sue√±o por noche.")
    print(df["Sleep_Hours"].describe())
    
    print("\nüìù Previous_Scores (Puntajes anteriores):")
    print("Resumen estad√≠stico de puntajes anteriores.")
    print(df["Previous_Scores"].describe())
    
    print("\nüí™ Motivation_Level (Nivel de motivaci√≥n):")
    print("Distribuci√≥n de niveles de motivaci√≥n.")
    print(df["Motivation_Level"].value_counts())
    
    print("\nüåê Internet_Access (Acceso a internet):")
    print("Frecuencias de disponibilidad de internet.")
    print(df["Internet_Access"].value_counts())
    
    print("\nüë®‚Äçüè´ Tutoring_Sessions (Sesiones de tutor√≠a):")
    print("Resumen estad√≠stico del n√∫mero de tutor√≠as adicionales.")
    print(df["Tutoring_Sessions"].describe())
    
    print("\nüí∞ Family_Income (Ingreso familiar):")
    print("Estad√≠sticas b√°sicas de ingreso familiar.")
    print(df["Family_Income"].describe())
    
    print("\nüéì Teacher_Quality (Calidad docente):")
    print("Distribuci√≥n de percepci√≥n de calidad docente.")
    print(df["Teacher_Quality"].value_counts())
    
    print("\nüè´ School_Type (Tipo de escuela):")
    print("Frecuencias seg√∫n tipo de escuela.")
    print(df["School_Type"].value_counts())
    
    print("\nüë• Peer_Influence (Influencia de pares):")
    print("Conteo de influencia de compa√±eros.")
    print(df["Peer_Influence"].value_counts())
    
    print("\nüèÉ‚Äç‚ôÇÔ∏è Physical_Activity (Actividad f√≠sica):")
    print("Resumen de frecuencia de actividad f√≠sica.")
    print(df["Physical_Activity"].describe())
    
    print("\nüß† Learning_Disabilities (Discapacidades de aprendizaje):")
    print("N√∫mero de estudiantes con o sin discapacidades de aprendizaje.")
    print(df["Learning_Disabilities"].value_counts())
    
    print("\nüéì Parental_Education_Level (Nivel educativo de padres):")
    print("Frecuencias por nivel educativo de los padres.")
    print(df["Parental_Education_Level"].value_counts())
    
    print("\nüìè Distance_from_Home (Distancia desde casa):")
    print("Estad√≠sticas de la distancia desde el hogar hasta la escuela.")
    print(df["Distance_from_Home"].describe())
    
    print("\nüë§ Gender (G√©nero):")
    print("Distribuci√≥n por g√©nero.")
    print(df["Gender"].value_counts())
    
    print("\nüéØ Exam_Score (Puntuaci√≥n del examen):")
    print("Estad√≠sticas descriptivas de la variable objetivo.")
    print(df["Exam_Score"].describe())
    
    print("\nüìä AN√ÅLISIS DE CORRELACIONES:")
    print("Promedio de Exam_Score seg√∫n g√©nero:")
    print(df.groupby("Gender")["Exam_Score"].mean().sort_values(ascending=False))
    
    print("\nCorrelaci√≥n entre variables num√©ricas y Exam_Score:")
    # Seleccionar solo las variables num√©ricas para el an√°lisis de correlaci√≥n
    variables_numericas = df.select_dtypes(include=[np.number])
    correlaciones = variables_numericas.corr()["Exam_Score"].sort_values(ascending=False)
    print(correlaciones)
    
    print("\n‚ö†Ô∏è  VALORES NULOS FINALES:")
    print("Cantidad de valores nulos en cada columna:")
    print(df.isnull().sum())

def generar_reporte_profiling(df: pd.DataFrame) -> None:
    """
    Genera reporte HTML con ydata-profiling (c√≥digo exacto de la Gu√≠a 1).
    
    Args:
        df (pd.DataFrame): DataFrame con los datos originales
    """
    imprimir_separador("GENERANDO REPORTE DE PROFILING")
    
    try:
        # C√≥digo exacto de la Gu√≠a 1 - Instalar ydata-profiling
        try:
            from ydata_profiling import ProfileReport
        except ImportError:
            print("‚ö†Ô∏è  ydata-profiling no est√° instalado. Instalando...")
            import subprocess
            subprocess.run(['pip', 'install', 'ydata-profiling'], check=True)
            from ydata_profiling import ProfileReport
        
        # C√≥digo exacto de la Gu√≠a 1 - Generar informe
        print("üìä Generando reporte de profiling HTML...")
        profile = ProfileReport(df, title="Reporte rendimiento", explorative=True)
        profile.to_file(ARCHIVO_REPORTE_EDA)
        
        print(f"‚úÖ Reporte HTML generado: {ARCHIVO_REPORTE_EDA}")
        
    except Exception as e:
        print(f"‚ùå Error generando reporte de profiling: {str(e)}")
        print("‚ö†Ô∏è  Continuando sin reporte de profiling...")

def generar_reporte_basico(df: pd.DataFrame) -> None:
    """
    Genera reporte b√°sico en HTML cuando ydata-profiling no est√° disponible.
    
    Args:
        df (pd.DataFrame): DataFrame con los datos originales
    """
    try:
        # Crear HTML b√°sico
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Reporte Rendimiento Estudiantil</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .section {{ margin: 20px 0; }}
                .stat {{ background: #f5f5f5; padding: 10px; margin: 10px 0; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <h1>üìä Reporte de Rendimiento Estudiantil</h1>
            <p>Fecha: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            
            <div class="section">
                <h2>üìã Informaci√≥n General</h2>
                <div class="stat">
                    <strong>Filas:</strong> {len(df):,}<br>
                    <strong>Columnas:</strong> {len(df.columns)}<br>
                    <strong>Valores nulos:</strong> {df.isnull().sum().sum():,}<br>
                    <strong>Duplicados:</strong> {df.duplicated().sum():,}
                </div>
            </div>
            
            <div class="section">
                <h2>üìä Estad√≠sticas Descriptivas</h2>
                {df.describe().to_html(classes='table')}
            </div>
            
            <div class="section">
                <h2>‚ö†Ô∏è Valores Nulos por Columna</h2>
                {df.isnull().sum().to_frame('Valores_Nulos').to_html(classes='table')}
            </div>
            
            <div class="section">
                <h2>üî¢ Valores √önicos por Columna</h2>
                {df.nunique().to_frame('Valores_Unicos').to_html(classes='table')}
            </div>
            
            <div class="section">
                <h2>üéØ Correlaciones con Exam_Score</h2>
                {df.select_dtypes(include=[np.number]).corr()['Exam_Score'].sort_values(ascending=False).to_frame('Correlacion').to_html(classes='table')}
            </div>
            
        </body>
        </html>
        """
        
        with open(ARCHIVO_REPORTE_EDA, 'w', encoding='utf-8') as f:
            f.write(html)
        
        print(f"‚úÖ Reporte b√°sico HTML generado: {ARCHIVO_REPORTE_EDA}")
        
    except Exception as e:
        print(f"‚ùå Error generando reporte b√°sico: {str(e)}")
        print("‚ö†Ô∏è  Continuando sin reporte de profiling...")

def ejecutar_eda_completo() -> pd.DataFrame:
    """
    Ejecuta el an√°lisis exploratorio de datos completo.
    
    Returns:
        pd.DataFrame: DataFrame con los datos originales
    """
    try:
        # Cargar datos originales
        df = cargar_datos_originales()
        
        # Exploraci√≥n b√°sica
        explorar_datos_basicos(df)
        
        # An√°lisis de patrones y tendencias
        analizar_patrones_tendencias(df)
        
        # Generar reporte de profiling
        generar_reporte_profiling(df)
        
        # Limpiar memoria
        limpiar_memoria()
        
        print(f"\n{MENSAJES['fin_eda']}")
        return df
        
    except Exception as e:
        logging.error(f"‚ùå Error en EDA: {str(e)}")
        raise

def main():
    """Funci√≥n principal para ejecutar el EDA."""
    df = ejecutar_eda_completo()
    return df

if __name__ == "__main__":
    main()
